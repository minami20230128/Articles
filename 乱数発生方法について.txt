・乱数発生方法について
0. 乱数生成の基本的な考え方
コンピュータが作る乱数は、
1 ある数を関数やアルゴリズムに通して得られる疑似乱数
2 数学的な意味での「乱数」である真の乱数
に分かれる。

1には規則性があり予測・計算することが可能なのでセキュリティ上の信頼性は低いが、生成速度は速い。
2は予測不可能だが、生成に時間がかかる。

1. rand
stdlib.hに定義されている関数。
単独で使っても毎回同じ乱数しか生成できないため、この関数を使用する前に

srand(unsigned int 〇〇(=シード))

で初期化して使う。
代表的なのはsrand((unsigned int)time(NULL))で現在時刻を渡す方法。
ただし、time_t型は秒単位なので、1秒間に何度も実行すると同じ乱数が生成されてしまう。

2. random_device
C++11の<random>に定義されている関数。
マウスの動き、ハードウェアのノイズなどをシードに用いるため、ユーザーから予測されにくい。
真の乱数を生成できる代わりに速度が遅い

3. mt19937
メルセンヌ・ツイスタ法というアルゴリズムを利用して乱数を生成するメソッド
生成できる乱数のパターンも非常に多く、
またrandom_deviceと異なり、乱数を決定的に(=一意に)生成できるため速度も速い。
random_deviceのような非決定的乱数生成器をシードに渡すことが一般的