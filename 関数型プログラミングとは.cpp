//・関数型プログラミングとは
//変数の状態がどんどん変化していき、コードの見通しが悪くなる(=副作用)を避けるためのプログラミング手法
//状態が変化するとは、以下のようなことをいう

#include <stdio.h>
#include <iostream>

int add(int& a)
{
    a += 1;
    return a;
}

//add(a)を何度も呼び出すとaの値が変わる=実行結果が変わる=読みづらい

//これを関数型に書き換えると、
int add(int& a)
{
    return a + 1;//aの値は変わらず処理の結果だけが得られる
}

//こうすることでadd(a)を何回行っても結果が同じになり、保守性・可読性が上がる
int main()
{
    int a = 1;
    printf("%d", add(a));
    printf("%d", add(a));//どちらも2になる

//さらに、同様の処理をaddという関数を定義することなく行えるのがラムダ式である
    int b = 1;
    auto add = [b](int& a){return a + b;};//*
    std::cout << add(a) << std::endl;
    b = 100;
    std::cout << add(a) << std::endl;
    return 0;
}

//bはキャプチャといい、ラムダ式に渡した時点(*)で固定されるので、あとから別の値を代入してもadd関数内の値は変えることが出来ない
//このように、関数に状態を持たせることをクロージャと呼ぶ
//最初の例のように変数aの値を変化させるよりも、関数を変化させるのが関数型プログラミングの考え方である

//C#のLINQもラムダ式を応用したものである
//配列から条件を満たす要素を見つける、ソートする、全ての要素に同じ処理をする等の動作は、手続型ではfor文で配列を回して行う必要がある
//(一行で書けないので分かりづらい、回る要素がどんどん変わるので副作用が生じる)

//しかし、LINQであれば
// int[] src = {0, 1, 2, 3, 4, 5};
// var query = src.Select(x => x % 3);//配列srcの全要素を3で割ったあまりを求める処理
//のように書けるので、わざわざ関数を定義する必要もなく、何の処理を行っているのかもわかりやすい