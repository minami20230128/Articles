・「C++による開発で陥りやすい問題点の検証」サマリー

配列に関する問題
#include <stdio.h>

void reverseHello(const char src[], char dst[])
{
  int i, j;

  for (i = 0, j = 0; i < 5; i++, j--){
    i[dst] = src[j];  /* A */
  }
}

int main(void)
{
  char hello[] = "Hello";
  char buf[6] = {'\0','\0','\0','\0','\0','\0'};
  reverseHello(&hello[4], buf);

  printf("%s\n", buf);

  return 0;
}

実行結果
olleH

1. コメントAにおけるi[dst]という書き方が、なぜ成立するのか
通常はdst[i]と書くことが多いが、演算子なので逆でもよいから
2. コメントAにおけるsrc[j]はjが負となるが、なぜ不正アクセスにならないのか
19行目の引数にhelloの最後の要素のアドレスを渡しているから
3. reverseHello関数の引数src、dstは配列か
c++において配列を引数にすることはできない
srcはhelloの5文字目のポインタ、dstはbufの最初の文字のポインタを渡している

参照に関する罠
引数を参照型にすることで、オブジェクトのコピーに伴うオーバーヘッドを解消できる

一時オブジェクトに関する知識不足

#include <stdio.h>
int& getParm()
{
  int parm = 0;
  return parm;
}

int main(void)
{
  int &p = getParm();
  printf("parm = %d\n",p);  // A
}

このコードは関数getParm内で破棄された変数parmを参照しようとしているため、不正アクセスとなる

ところが、

#include <iostream>
#include <string>

using namespace std;

const string getABC()
{
  return "ABC";
}

int main(void)
{
  const string& abc = getABC();
  cout << abc << '\n';
}

この例ではstringクラスのコンストラクタに文字列リテラルを受け取ることが可能なため、一時オブジェクトが作成され、
そのオブジェクトへの参照がabcに格納される

#include <stdio>

enum{
  CAT;
  DOG;
};

CString getKind(int number)
{
  if (number == CAT){
    return "cat";
  } else {
    return "dog";
  }
}

int main(void)
{
  printf("%s\n", (const char *)getKind(CAT));  /* A */
  const TCHAR *temp = getKind(DOG);
  printf("%s\n", temp);                        /* B */
}

この例では、Aは一時オブジェクトが寿命を保っているので表示できるが、
Bはtempに格納した時点(97行目)で一時オブジェクトの寿命が尽きるので表示できない

